//
//  File.swift
//  
//
//  Created by Sergey Starukhin on 15.06.2022.
//

import Foundation

/// This protocol is largely based on interface Alamofire's [`MultipartFormData`](https://github.com/Alamofire/Alamofire/blob/master/Source/MultipartFormData.swift) project.
public protocol FormDataBuilder {
	/// The body part data will be encoded using the following format:
	///
	/// - `Content-Disposition: form-data; name=#{name}; filename=#{filename}` (HTTP Header)
	/// - `Content-Type: #{mimeType}` (HTTP Header)
	/// - Encoded file data
	/// - Multipart form boundary
	///
	/// - Parameters:
	///   - data:     `Data` to encoding into the instance.
	///   - name:     Name to associate with the `Data` in the `Content-Disposition` HTTP header.
	///   - fileName: Filename to associate with the `Data` in the `Content-Disposition` HTTP header.
	///   - mimeType: MIME type to associate with the data in the `Content-Type` HTTP header.
	func append(_ data: Data, withName name: String, fileName: String?, mimeType: String?)

	/// The body part data will be encoded using the following format:
	///
	/// - `Content-Disposition: form-data; name=#{name}; filename=#{generated filename}` (HTTP Header)
	/// - `Content-Type: #{generated mimeType}` (HTTP Header)
	/// - Encoded file data
	/// - Multipart form boundary
	///
	/// The filename in the `Content-Disposition` HTTP header is generated from the last path component of the
	/// `fileURL`. The `Content-Type` HTTP header MIME type is generated by mapping the `fileURL` extension to the
	/// system associated MIME type.
	///
	/// - Parameters:
	///   - fileURL: `URL` of the file whose content will be encoded into the instance.
	///   - name:    Name to associate with the file content in the `Content-Disposition` HTTP header.
	func append(_ fileURL: URL, withName name: String)

	/// The body part data will be encoded using the following format:
	///
	/// - Content-Disposition: form-data; name=#{name}; filename=#{filename} (HTTP Header)
	/// - Content-Type: #{mimeType} (HTTP Header)
	/// - Encoded file data
	/// - Multipart form boundary
	///
	/// - Parameters:
	///   - fileURL:  `URL` of the file whose content will be encoded into the instance.
	///   - name:     Name to associate with the file content in the `Content-Disposition` HTTP header.
	///   - fileName: Filename to associate with the file content in the `Content-Disposition` HTTP header.
	///   - mimeType: MIME type to associate with the file content in the `Content-Type` HTTP header.
	func append(_ fileURL: URL, withName name: String, fileName: String, mimeType: String)

	/// The body part data will be encoded using the following format:
	///
	/// - `Content-Disposition: form-data; name=#{name}; filename=#{filename}` (HTTP Header)
	/// - `Content-Type: #{mimeType}` (HTTP Header)
	/// - Encoded stream data
	/// - Multipart form boundary
	///
	/// - Parameters:
	///   - stream:   `InputStream` to encode into the instance.
	///   - length:   Length, in bytes, of the stream.
	///   - name:     Name to associate with the stream content in the `Content-Disposition` HTTP header.
	///   - fileName: Filename to associate with the stream content in the `Content-Disposition` HTTP header.
	///   - mimeType: MIME type to associate with the stream content in the `Content-Type` HTTP header.
	func append(_ stream: InputStream, withLength length: UInt64, name: String, fileName: String, mimeType: String)

	/// The body part data will be encoded using the following format:
	///
	/// - HTTP headers
	/// - Encoded stream data
	/// - Multipart form boundary
	///
	/// - Parameters:
	///   - stream:  `InputStream` to encode into the instance.
	///   - length:  Length, in bytes, of the stream.
	///   - headers: `HTTPHeaders` for the body part.
	func append(_ stream: InputStream, withLength length: UInt64, headers: HTTPHeaders)
}
